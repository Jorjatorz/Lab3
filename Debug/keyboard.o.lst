   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"keyboard.c"
  21              	.Ltext0:
  22              		.file 1 "../keyboard.c"
 1798              		.align	2
 1799              	password:
 1800 0000 00000000 		.space	10
 1800      00000000 
 1800      0000
 1801 000a 0000     		.align	2
 1802              	attempt:
 1803 000c 00000000 		.space	10
 1803      00000000 
 1803      0000
 1804 0016 0000     		.align	2
 1805              	gameCurrentMode:
 1806 0018 00000000 		.space	4
 1807              		.text
 1808              		.align	2
 1809              		.global	keyboard_init
 1811              	keyboard_init:
 1812              	.LFB0:
   1:../keyboard.c **** /*-------------------------------------------------------------------
   2:../keyboard.c **** **
   3:../keyboard.c **** **  Fichero:
   4:../keyboard.c **** **    keyboard.c  10/6/2014
   5:../keyboard.c **** **
   6:../keyboard.c **** **    Estructura de Computadores
   7:../keyboard.c **** **    Dpto. de Arquitectura de Computadores y Automática
   8:../keyboard.c **** **    Facultad de Informática. Universidad Complutense de Madrid
   9:../keyboard.c **** **
  10:../keyboard.c **** **  Propósito:
  11:../keyboard.c **** **    Contiene las implementaciones de las funciones
  12:../keyboard.c **** **    para la gestión del teclado de la placa de prototipado
  13:../keyboard.c **** **
  14:../keyboard.c **** **  Notas de diseño:
  15:../keyboard.c **** **
  16:../keyboard.c **** **-----------------------------------------------------------------*/
  17:../keyboard.c **** 
  18:../keyboard.c **** #include "44b.h"
  19:../keyboard.c **** #include "utils.h"
  20:../keyboard.c **** #include "keyboard.h"
  21:../keyboard.c **** #include "timer.h"
  22:../keyboard.c **** 
  23:../keyboard.c **** #define KEY_VALUE_MASK	0x0f
  24:../keyboard.c **** 
  25:../keyboard.c **** 
  26:../keyboard.c **** static int key_read( void );
  27:../keyboard.c **** static void keyboard_ISR(void) __attribute__ ((interrupt ("IRQ")));
  28:../keyboard.c **** 
  29:../keyboard.c **** static tQueue password;
  30:../keyboard.c **** static tQueue attempt;
  31:../keyboard.c **** static int gameCurrentMode = 0; //0 -> Asking Password, 1 -> Asking for match
  32:../keyboard.c **** 
  33:../keyboard.c **** void keyboard_init( void )
  34:../keyboard.c **** {
 1813              		.loc 1 34 0
 1814              		.cfi_startproc
 1815              		@ Function supports interworking.
 1816              		@ args = 0, pretend = 0, frame = 0
 1817              		@ frame_needed = 1, uses_anonymous_args = 0
 1818 0000 0DC0A0E1 		mov	ip, sp
 1819              	.LCFI0:
 1820              		.cfi_def_cfa_register 12
 1821 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1822 0008 04B04CE2 		sub	fp, ip, #4
 1823              		.cfi_offset 14, -8
 1824              		.cfi_offset 13, -12
 1825              		.cfi_offset 11, -16
 1826              	.LCFI1:
 1827              		.cfi_def_cfa 11, 4
  35:../keyboard.c **** 
  36:../keyboard.c **** 	/* Configurar puerto G para interrupciones del teclado */
  37:../keyboard.c **** 
  38:../keyboard.c **** 	rPCONG = 0xffff; //All the pins interrupts in their lines
 1828              		.loc 1 38 0
 1829 000c 88309FE5 		ldr	r3, .L2
 1830 0010 88209FE5 		ldr	r2, .L2+4
 1831 0014 002083E5 		str	r2, [r3, #0]
  39:../keyboard.c **** 
  40:../keyboard.c **** 	/* Establecer ISR de teclado */
  41:../keyboard.c **** 	pISR_EINT1 = keyboard_ISR;
 1832              		.loc 1 41 0
 1833 0018 84309FE5 		ldr	r3, .L2+8
 1834 001c 84209FE5 		ldr	r2, .L2+12
 1835 0020 002083E5 		str	r2, [r3, #0]
  42:../keyboard.c **** 
  43:../keyboard.c **** 	/*Borrar interrupciones antes habilitar*/
  44:../keyboard.c **** 
  45:../keyboard.c **** 	 rI_ISPC = 0x3ffffff;	//  -Borramos pendientes por IRQ
 1836              		.loc 1 45 0
 1837 0024 80309FE5 		ldr	r3, .L2+16
 1838 0028 3F23E0E3 		mvn	r2, #-67108864
 1839 002c 002083E5 		str	r2, [r3, #0]
  46:../keyboard.c **** 	 rF_ISPC = 0x3ffffff; 	//  -Borramos pendientes FIQ
 1840              		.loc 1 46 0
 1841 0030 78309FE5 		ldr	r3, .L2+20
 1842 0034 3F23E0E3 		mvn	r2, #-67108864
 1843 0038 002083E5 		str	r2, [r3, #0]
  47:../keyboard.c **** 
  48:../keyboard.c **** 
  49:../keyboard.c ****     /* Desenmascara la línea del teclado y el bit global */
  50:../keyboard.c **** 
  51:../keyboard.c **** 	 rINTMSK &= ~BIT_GLOBAL;	//Unmask global bit
 1844              		.loc 1 51 0
 1845 003c 70309FE5 		ldr	r3, .L2+24
 1846 0040 6C209FE5 		ldr	r2, .L2+24
 1847 0044 002092E5 		ldr	r2, [r2, #0]
 1848 0048 0123C2E3 		bic	r2, r2, #67108864
 1849 004c 002083E5 		str	r2, [r3, #0]
  52:../keyboard.c **** 	 rINTMSK &= ~BIT_EINT1;	 	//Unmask keybouard line
 1850              		.loc 1 52 0
 1851 0050 5C309FE5 		ldr	r3, .L2+24
 1852 0054 58209FE5 		ldr	r2, .L2+24
 1853 0058 002092E5 		ldr	r2, [r2, #0]
 1854 005c 0124C2E3 		bic	r2, r2, #16777216
 1855 0060 002083E5 		str	r2, [r3, #0]
  53:../keyboard.c **** 
  54:../keyboard.c **** 
  55:../keyboard.c **** 	 //Inicializamos la cola y el display para mostrar una C
  56:../keyboard.c **** 	 password.elements = 0;
 1856              		.loc 1 56 0
 1857 0064 4C309FE5 		ldr	r3, .L2+28
 1858 0068 0020A0E3 		mov	r2, #0
 1859 006c B820C3E1 		strh	r2, [r3, #8]	@ movhi
  57:../keyboard.c **** 	 attempt.elements = 0;
 1860              		.loc 1 57 0
 1861 0070 44309FE5 		ldr	r3, .L2+32
 1862 0074 0020A0E3 		mov	r2, #0
 1863 0078 B820C3E1 		strh	r2, [r3, #8]	@ movhi
  58:../keyboard.c **** 	 gameCurrentMode = 0;
 1864              		.loc 1 58 0
 1865 007c 3C309FE5 		ldr	r3, .L2+36
 1866 0080 0020A0E3 		mov	r2, #0
 1867 0084 002083E5 		str	r2, [r3, #0]
  59:../keyboard.c **** 	 D8Led_digit(12); //Display C
 1868              		.loc 1 59 0
 1869 0088 0C00A0E3 		mov	r0, #12
 1870 008c FEFFFFEB 		bl	D8Led_digit
  60:../keyboard.c **** 
  61:../keyboard.c **** }
 1871              		.loc 1 61 0
 1872 0090 0CD04BE2 		sub	sp, fp, #12
 1873 0094 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1874 0098 1EFF2FE1 		bx	lr
 1875              	.L3:
 1876              		.align	2
 1877              	.L2:
 1878 009c 4000D201 		.word	30539840
 1879 00a0 FFFF0000 		.word	65535
 1880 00a4 80FF7F0C 		.word	209715072
 1881 00a8 00000000 		.word	keyboard_ISR
 1882 00ac 2400E001 		.word	31457316
 1883 00b0 3C00E001 		.word	31457340
 1884 00b4 0C00E001 		.word	31457292
 1885 00b8 00000000 		.word	password
 1886 00bc 0C000000 		.word	attempt
 1887 00c0 18000000 		.word	gameCurrentMode
 1888              		.cfi_endproc
 1889              	.LFE0:
 1891              		.align	2
 1893              	key_read:
 1894              	.LFB1:
  62:../keyboard.c **** 
  63:../keyboard.c **** static int key_read( void )
  64:../keyboard.c **** {
 1895              		.loc 1 64 0
 1896              		.cfi_startproc
 1897              		@ Function supports interworking.
 1898              		@ args = 0, pretend = 0, frame = 8
 1899              		@ frame_needed = 1, uses_anonymous_args = 0
 1900 00c4 0DC0A0E1 		mov	ip, sp
 1901              	.LCFI2:
 1902              		.cfi_def_cfa_register 12
 1903 00c8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1904 00cc 04B04CE2 		sub	fp, ip, #4
 1905              		.cfi_offset 14, -8
 1906              		.cfi_offset 13, -12
 1907              		.cfi_offset 11, -16
 1908              	.LCFI3:
 1909              		.cfi_def_cfa 11, 4
 1910 00d0 08D04DE2 		sub	sp, sp, #8
  65:../keyboard.c **** 	int value;
  66:../keyboard.c **** 	char temp;
  67:../keyboard.c **** 
  68:../keyboard.c **** 	/* leer linea 1 */
  69:../keyboard.c **** 	temp = *(KEYBADDR+0xfd);
 1911              		.loc 1 69 0
 1912 00d4 2C329FE5 		ldr	r3, .L26
 1913 00d8 0030D3E5 		ldrb	r3, [r3, #0]
 1914 00dc 11304BE5 		strb	r3, [fp, #-17]
  70:../keyboard.c **** 	temp = temp & KEY_VALUE_MASK;
 1915              		.loc 1 70 0
 1916 00e0 11305BE5 		ldrb	r3, [fp, #-17]
 1917 00e4 0F3003E2 		and	r3, r3, #15
 1918 00e8 11304BE5 		strb	r3, [fp, #-17]
  71:../keyboard.c **** 	if (temp  != KEY_VALUE_MASK)
 1919              		.loc 1 71 0
 1920 00ec 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 1921 00f0 0F0053E3 		cmp	r3, #15
 1922 00f4 1800000A 		beq	.L5
  72:../keyboard.c **** 	{
  73:../keyboard.c **** 		if( temp == 0x0E )
 1923              		.loc 1 73 0
 1924 00f8 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 1925 00fc 0E0053E3 		cmp	r3, #14
 1926 0100 0200001A 		bne	.L6
  74:../keyboard.c **** 			value = 3;
 1927              		.loc 1 74 0
 1928 0104 0330A0E3 		mov	r3, #3
 1929 0108 10300BE5 		str	r3, [fp, #-16]
 1930 010c 100000EA 		b	.L7
 1931              	.L6:
  75:../keyboard.c **** 		else if( temp == 0x0D )
 1932              		.loc 1 75 0
 1933 0110 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 1934 0114 0D0053E3 		cmp	r3, #13
 1935 0118 0200001A 		bne	.L8
  76:../keyboard.c **** 			value = 2;
 1936              		.loc 1 76 0
 1937 011c 0230A0E3 		mov	r3, #2
 1938 0120 10300BE5 		str	r3, [fp, #-16]
 1939 0124 0A0000EA 		b	.L7
 1940              	.L8:
  77:../keyboard.c **** 		else if( temp == 0x0B )
 1941              		.loc 1 77 0
 1942 0128 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 1943 012c 0B0053E3 		cmp	r3, #11
 1944 0130 0200001A 		bne	.L9
  78:../keyboard.c **** 			value = 1;
 1945              		.loc 1 78 0
 1946 0134 0130A0E3 		mov	r3, #1
 1947 0138 10300BE5 		str	r3, [fp, #-16]
 1948 013c 040000EA 		b	.L7
 1949              	.L9:
  79:../keyboard.c **** 		else if( temp == 0x07 )
 1950              		.loc 1 79 0
 1951 0140 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 1952 0144 070053E3 		cmp	r3, #7
 1953 0148 0100001A 		bne	.L7
  80:../keyboard.c **** 			value = 0;
 1954              		.loc 1 80 0
 1955 014c 0030A0E3 		mov	r3, #0
 1956 0150 10300BE5 		str	r3, [fp, #-16]
 1957              	.L7:
  81:../keyboard.c **** 		return value;
 1958              		.loc 1 81 0
 1959 0154 10301BE5 		ldr	r3, [fp, #-16]
 1960 0158 660000EA 		b	.L10
 1961              	.L5:
  82:../keyboard.c **** 	}
  83:../keyboard.c **** 	
  84:../keyboard.c **** 	/* linea 2 */
  85:../keyboard.c **** 	temp = *(KEYBADDR+0xfb);
 1962              		.loc 1 85 0
 1963 015c A8319FE5 		ldr	r3, .L26+4
 1964 0160 0030D3E5 		ldrb	r3, [r3, #0]
 1965 0164 11304BE5 		strb	r3, [fp, #-17]
  86:../keyboard.c **** 	temp = temp & KEY_VALUE_MASK;
 1966              		.loc 1 86 0
 1967 0168 11305BE5 		ldrb	r3, [fp, #-17]
 1968 016c 0F3003E2 		and	r3, r3, #15
 1969 0170 11304BE5 		strb	r3, [fp, #-17]
  87:../keyboard.c **** 	if (temp  != KEY_VALUE_MASK)
 1970              		.loc 1 87 0
 1971 0174 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 1972 0178 0F0053E3 		cmp	r3, #15
 1973 017c 1800000A 		beq	.L11
  88:../keyboard.c **** 	{
  89:../keyboard.c **** 		if( temp == 0x0E )
 1974              		.loc 1 89 0
 1975 0180 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 1976 0184 0E0053E3 		cmp	r3, #14
 1977 0188 0200001A 		bne	.L12
  90:../keyboard.c **** 			value = 7;
 1978              		.loc 1 90 0
 1979 018c 0730A0E3 		mov	r3, #7
 1980 0190 10300BE5 		str	r3, [fp, #-16]
 1981 0194 100000EA 		b	.L13
 1982              	.L12:
  91:../keyboard.c **** 		else if( temp == 0x0D )
 1983              		.loc 1 91 0
 1984 0198 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 1985 019c 0D0053E3 		cmp	r3, #13
 1986 01a0 0200001A 		bne	.L14
  92:../keyboard.c **** 			value = 6;
 1987              		.loc 1 92 0
 1988 01a4 0630A0E3 		mov	r3, #6
 1989 01a8 10300BE5 		str	r3, [fp, #-16]
 1990 01ac 0A0000EA 		b	.L13
 1991              	.L14:
  93:../keyboard.c **** 		else if( temp == 0x0B )
 1992              		.loc 1 93 0
 1993 01b0 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 1994 01b4 0B0053E3 		cmp	r3, #11
 1995 01b8 0200001A 		bne	.L15
  94:../keyboard.c **** 			value = 5;
 1996              		.loc 1 94 0
 1997 01bc 0530A0E3 		mov	r3, #5
 1998 01c0 10300BE5 		str	r3, [fp, #-16]
 1999 01c4 040000EA 		b	.L13
 2000              	.L15:
  95:../keyboard.c **** 		else if( temp == 0x07 )
 2001              		.loc 1 95 0
 2002 01c8 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2003 01cc 070053E3 		cmp	r3, #7
 2004 01d0 0100001A 		bne	.L13
  96:../keyboard.c **** 			value = 4;
 2005              		.loc 1 96 0
 2006 01d4 0430A0E3 		mov	r3, #4
 2007 01d8 10300BE5 		str	r3, [fp, #-16]
 2008              	.L13:
  97:../keyboard.c **** 		return value;
 2009              		.loc 1 97 0
 2010 01dc 10301BE5 		ldr	r3, [fp, #-16]
 2011 01e0 440000EA 		b	.L10
 2012              	.L11:
  98:../keyboard.c **** 	}
  99:../keyboard.c **** 	
 100:../keyboard.c **** 	/* linea 3 */
 101:../keyboard.c **** 	temp = *(KEYBADDR+0xf7);
 2013              		.loc 1 101 0
 2014 01e4 24319FE5 		ldr	r3, .L26+8
 2015 01e8 0030D3E5 		ldrb	r3, [r3, #0]
 2016 01ec 11304BE5 		strb	r3, [fp, #-17]
 102:../keyboard.c **** 	temp = temp & KEY_VALUE_MASK;
 2017              		.loc 1 102 0
 2018 01f0 11305BE5 		ldrb	r3, [fp, #-17]
 2019 01f4 0F3003E2 		and	r3, r3, #15
 2020 01f8 11304BE5 		strb	r3, [fp, #-17]
 103:../keyboard.c **** 	if (temp  != KEY_VALUE_MASK)
 2021              		.loc 1 103 0
 2022 01fc 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2023 0200 0F0053E3 		cmp	r3, #15
 2024 0204 1800000A 		beq	.L16
 104:../keyboard.c **** 	{
 105:../keyboard.c **** 		if( temp == 0x0E )
 2025              		.loc 1 105 0
 2026 0208 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2027 020c 0E0053E3 		cmp	r3, #14
 2028 0210 0200001A 		bne	.L17
 106:../keyboard.c **** 			value = 0xb;
 2029              		.loc 1 106 0
 2030 0214 0B30A0E3 		mov	r3, #11
 2031 0218 10300BE5 		str	r3, [fp, #-16]
 2032 021c 100000EA 		b	.L18
 2033              	.L17:
 107:../keyboard.c **** 		else if( temp == 0x0D )
 2034              		.loc 1 107 0
 2035 0220 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2036 0224 0D0053E3 		cmp	r3, #13
 2037 0228 0200001A 		bne	.L19
 108:../keyboard.c **** 			value = 0xa;
 2038              		.loc 1 108 0
 2039 022c 0A30A0E3 		mov	r3, #10
 2040 0230 10300BE5 		str	r3, [fp, #-16]
 2041 0234 0A0000EA 		b	.L18
 2042              	.L19:
 109:../keyboard.c **** 		else if( temp == 0x0B )
 2043              		.loc 1 109 0
 2044 0238 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2045 023c 0B0053E3 		cmp	r3, #11
 2046 0240 0200001A 		bne	.L20
 110:../keyboard.c **** 			value = 9;
 2047              		.loc 1 110 0
 2048 0244 0930A0E3 		mov	r3, #9
 2049 0248 10300BE5 		str	r3, [fp, #-16]
 2050 024c 040000EA 		b	.L18
 2051              	.L20:
 111:../keyboard.c **** 		else if( temp == 0x07 )
 2052              		.loc 1 111 0
 2053 0250 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2054 0254 070053E3 		cmp	r3, #7
 2055 0258 0100001A 		bne	.L18
 112:../keyboard.c **** 			value = 8;
 2056              		.loc 1 112 0
 2057 025c 0830A0E3 		mov	r3, #8
 2058 0260 10300BE5 		str	r3, [fp, #-16]
 2059              	.L18:
 113:../keyboard.c **** 		return value;
 2060              		.loc 1 113 0
 2061 0264 10301BE5 		ldr	r3, [fp, #-16]
 2062 0268 220000EA 		b	.L10
 2063              	.L16:
 114:../keyboard.c **** 	}
 115:../keyboard.c **** 	
 116:../keyboard.c **** 	/* linea 4 */
 117:../keyboard.c **** 	temp = *(KEYBADDR+0xef);
 2064              		.loc 1 117 0
 2065 026c A0309FE5 		ldr	r3, .L26+12
 2066 0270 0030D3E5 		ldrb	r3, [r3, #0]
 2067 0274 11304BE5 		strb	r3, [fp, #-17]
 118:../keyboard.c **** 	temp = temp & KEY_VALUE_MASK;
 2068              		.loc 1 118 0
 2069 0278 11305BE5 		ldrb	r3, [fp, #-17]
 2070 027c 0F3003E2 		and	r3, r3, #15
 2071 0280 11304BE5 		strb	r3, [fp, #-17]
 119:../keyboard.c **** 	if (temp  != KEY_VALUE_MASK)
 2072              		.loc 1 119 0
 2073 0284 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2074 0288 0F0053E3 		cmp	r3, #15
 2075 028c 1800000A 		beq	.L21
 120:../keyboard.c **** 	{
 121:../keyboard.c **** 		if( temp == 0x0E )
 2076              		.loc 1 121 0
 2077 0290 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2078 0294 0E0053E3 		cmp	r3, #14
 2079 0298 0200001A 		bne	.L22
 122:../keyboard.c **** 			value = 0xf;
 2080              		.loc 1 122 0
 2081 029c 0F30A0E3 		mov	r3, #15
 2082 02a0 10300BE5 		str	r3, [fp, #-16]
 2083 02a4 100000EA 		b	.L23
 2084              	.L22:
 123:../keyboard.c **** 		else if( temp == 0x0D )
 2085              		.loc 1 123 0
 2086 02a8 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2087 02ac 0D0053E3 		cmp	r3, #13
 2088 02b0 0200001A 		bne	.L24
 124:../keyboard.c **** 			value = 0xe;
 2089              		.loc 1 124 0
 2090 02b4 0E30A0E3 		mov	r3, #14
 2091 02b8 10300BE5 		str	r3, [fp, #-16]
 2092 02bc 0A0000EA 		b	.L23
 2093              	.L24:
 125:../keyboard.c **** 		else if( temp == 0x0B )
 2094              		.loc 1 125 0
 2095 02c0 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2096 02c4 0B0053E3 		cmp	r3, #11
 2097 02c8 0200001A 		bne	.L25
 126:../keyboard.c **** 			value = 0xd;
 2098              		.loc 1 126 0
 2099 02cc 0D30A0E3 		mov	r3, #13
 2100 02d0 10300BE5 		str	r3, [fp, #-16]
 2101 02d4 040000EA 		b	.L23
 2102              	.L25:
 127:../keyboard.c **** 		else if( temp == 0x07 )
 2103              		.loc 1 127 0
 2104 02d8 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2105 02dc 070053E3 		cmp	r3, #7
 2106 02e0 0100001A 		bne	.L23
 128:../keyboard.c **** 			value = 0xc;
 2107              		.loc 1 128 0
 2108 02e4 0C30A0E3 		mov	r3, #12
 2109 02e8 10300BE5 		str	r3, [fp, #-16]
 2110              	.L23:
 129:../keyboard.c **** 		return value;
 2111              		.loc 1 129 0
 2112 02ec 10301BE5 		ldr	r3, [fp, #-16]
 2113 02f0 000000EA 		b	.L10
 2114              	.L21:
 130:../keyboard.c **** 	}
 131:../keyboard.c **** 	return -1;
 2115              		.loc 1 131 0
 2116 02f4 0030E0E3 		mvn	r3, #0
 2117              	.L10:
 132:../keyboard.c **** }
 2118              		.loc 1 132 0
 2119 02f8 0300A0E1 		mov	r0, r3
 2120 02fc 0CD04BE2 		sub	sp, fp, #12
 2121 0300 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2122 0304 1EFF2FE1 		bx	lr
 2123              	.L27:
 2124              		.align	2
 2125              	.L26:
 2126 0308 FD000006 		.word	100663549
 2127 030c FB000006 		.word	100663547
 2128 0310 F7000006 		.word	100663543
 2129 0314 EF000006 		.word	100663535
 2130              		.cfi_endproc
 2131              	.LFE1:
 2133              		.align	2
 2135              	keyboard_ISR:
 2136              	.LFB2:
 133:../keyboard.c **** 
 134:../keyboard.c **** static void keyboard_ISR(void)
 135:../keyboard.c **** {
 2137              		.loc 1 135 0
 2138              		.cfi_startproc
 2139              		@ Interrupt Service Routine.
 2140              		@ args = 0, pretend = 0, frame = 24
 2141              		@ frame_needed = 1, uses_anonymous_args = 0
 2142 0318 04C02DE5 		str	ip, [sp, #-4]!
 2143 031c 0DC0A0E1 		mov	ip, sp
 2144              	.LCFI4:
 2145              		.cfi_def_cfa_register 12
 2146 0320 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 2147 0324 04B04CE2 		sub	fp, ip, #4
 2148              		.cfi_offset 14, -8
 2149              		.cfi_offset 13, -12
 2150              		.cfi_offset 11, -16
 2151              		.cfi_offset 3, -20
 2152              		.cfi_offset 2, -24
 2153              		.cfi_offset 1, -28
 2154              		.cfi_offset 0, -32
 2155              	.LCFI5:
 2156              		.cfi_def_cfa 11, 4
 2157 0328 18D04DE2 		sub	sp, sp, #24
 136:../keyboard.c **** 	int key;
 137:../keyboard.c **** 
 138:../keyboard.c **** 	/* Eliminar rebotes de presion */
 139:../keyboard.c **** 	Delay(200);
 2158              		.loc 1 139 0
 2159 032c C800A0E3 		mov	r0, #200
 2160 0330 FEFFFFEB 		bl	Delay
 140:../keyboard.c **** 
 141:../keyboard.c **** 	/* Escaneo de tecla */
 142:../keyboard.c **** 	key = key_read();
 2161              		.loc 1 142 0
 2162 0334 62FFFFEB 		bl	key_read
 2163 0338 28000BE5 		str	r0, [fp, #-40]
 143:../keyboard.c **** 
 144:../keyboard.c **** 	// En caso de error, key = -1
 145:../keyboard.c **** 	/*if (key != -1)
 146:../keyboard.c **** 		D8Led_digit(key); //Display the key on the D8 Led*/
 147:../keyboard.c **** 
 148:../keyboard.c **** 	/*****************************************GAME LOGIC**********************************************
 149:../keyboard.c **** 	//Password mode
 150:../keyboard.c **** 	if(gameCurrentMode == 0)
 2164              		.loc 1 150 0
 2165 033c 2C329FE5 		ldr	r3, .L46
 2166 0340 003093E5 		ldr	r3, [r3, #0]
 2167 0344 000053E3 		cmp	r3, #0
 2168 0348 1C00001A 		bne	.L29
 151:../keyboard.c **** 	{
 152:../keyboard.c **** 		//Si la tecla pulsada no es la F
 153:../keyboard.c **** 		if(key != 15)
 2169              		.loc 1 153 0
 2170 034c 28301BE5 		ldr	r3, [fp, #-40]
 2171 0350 0F0053E3 		cmp	r3, #15
 2172 0354 0300000A 		beq	.L30
 154:../keyboard.c **** 		{
 155:../keyboard.c **** 			insertElementToQueue(&password, key);
 2173              		.loc 1 155 0
 2174 0358 14029FE5 		ldr	r0, .L46+4
 2175 035c 28101BE5 		ldr	r1, [fp, #-40]
 2176 0360 FEFFFFEB 		bl	insertElementToQueue
 156:../keyboard.c **** 		}
 157:../keyboard.c **** 		else
 158:../keyboard.c **** 		{
 159:../keyboard.c **** 			//Si la pass tiene 4 digitos msotrarlos cada segundo, sino no hacer nada
 160:../keyboard.c **** 			if(password.elements == 4)
 161:../keyboard.c **** 			{
 162:../keyboard.c **** 				 timer_init(1); //Cada 1 segundo
 163:../keyboard.c **** 				 timer_start(password);
 164:../keyboard.c **** 
 165:../keyboard.c **** 				 while(!timer_isStop())
 166:../keyboard.c **** 				 {}
 167:../keyboard.c **** 
 168:../keyboard.c **** 				gameCurrentMode = 1; //Cambiar de modo
 169:../keyboard.c **** 				D8Led_digit(15); //Mostar F
 170:../keyboard.c **** 			}
 171:../keyboard.c **** 		}
 172:../keyboard.c **** 	}
 173:../keyboard.c **** 	else
 174:../keyboard.c **** 	{
 175:../keyboard.c **** 		//Si la tecla pulsada no es la F
 176:../keyboard.c **** 		if(key != 15)
 177:../keyboard.c **** 		{
 178:../keyboard.c **** 			insertElementToQueue(&attempt, key);
 179:../keyboard.c **** 		}
 180:../keyboard.c **** 		else
 181:../keyboard.c **** 		{
 182:../keyboard.c **** 			//Si el attempt tiene 4 digitos msotrarlos cada segundo, sino no hacer nada
 183:../keyboard.c **** 			if(attempt.elements == 4)
 184:../keyboard.c **** 			{
 185:../keyboard.c **** 			 timer_init(1);
 186:../keyboard.c **** 			 timer_start(attempt);
 187:../keyboard.c **** 
 188:../keyboard.c **** 			 while(!timer_isStop())
 189:../keyboard.c **** 			 {}
 190:../keyboard.c **** 				 int equals = 1;
 191:../keyboard.c **** 				 int i;
 192:../keyboard.c **** 				 for(i = 0; i < 4; i++)
 193:../keyboard.c **** 				 {
 194:../keyboard.c **** 					 if(password._queue[i] != attempt._queue[i])
 195:../keyboard.c **** 					 {
 196:../keyboard.c **** 						 equals = 0;
 197:../keyboard.c **** 						 break;
 198:../keyboard.c **** 					 }
 199:../keyboard.c **** 				 }
 200:../keyboard.c **** 
 201:../keyboard.c **** 				 //Hacer una lista negativa para que el timer no la muestre
 202:../keyboard.c **** 				 tQueue emptyQ;
 203:../keyboard.c **** 				 emptyQ.elements = -1;
 204:../keyboard.c **** 				 if(equals == 1)
 205:../keyboard.c **** 				 {
 206:../keyboard.c **** 					 D8Led_digit(10); //A
 207:../keyboard.c **** 					 timer_init(2);
 208:../keyboard.c **** 					 timer_start(emptyQ);
 209:../keyboard.c **** 					 while(!timer_isStop())
 210:../keyboard.c **** 					 {}
 211:../keyboard.c **** 				 }
 212:../keyboard.c **** 				 else
 213:../keyboard.c **** 				 {
 214:../keyboard.c **** 					 D8Led_digit(14); //E
 215:../keyboard.c **** 					 timer_init(2);
 216:../keyboard.c **** 					 timer_start(emptyQ);
 217:../keyboard.c **** 					 while(!timer_isStop())
 218:../keyboard.c **** 					{}
 219:../keyboard.c **** 				 }
 220:../keyboard.c **** 
 221:../keyboard.c **** 
 222:../keyboard.c **** 				 //Volvemos a empezar el juego
 223:../keyboard.c **** 				 gameCurrentMode = 0; //Cambiar de modo
 224:../keyboard.c **** 				 D8Led_digit(15); //Mostar C
 225:../keyboard.c **** 
 226:../keyboard.c **** 			}
 227:../keyboard.c **** 		}
 228:../keyboard.c **** 	}
 229:../keyboard.c **** 	/*************************************************************************************************
 230:../keyboard.c **** 
 231:../keyboard.c **** 	/* Esperar a que la tecla se suelte */
 232:../keyboard.c **** 	while (!(rPDATG & 0x02));
 2177              		.loc 1 232 0
 2178 0364 710000EA 		b	.L43
 2179              	.L30:
 160:../keyboard.c **** 			if(password.elements == 4)
 2180              		.loc 1 160 0
 2181 0368 04329FE5 		ldr	r3, .L46+4
 2182 036c B830D3E1 		ldrh	r3, [r3, #8]
 2183 0370 0338A0E1 		mov	r3, r3, asl #16
 2184 0374 4338A0E1 		mov	r3, r3, asr #16
 2185 0378 040053E3 		cmp	r3, #4
 2186 037c 6800001A 		bne	.L44
 2187              	.LBB2:
 162:../keyboard.c **** 				 timer_init(1); //Cada 1 segundo
 2188              		.loc 1 162 0
 2189 0380 0100A0E3 		mov	r0, #1
 2190 0384 FEFFFFEB 		bl	timer_init
 163:../keyboard.c **** 				 timer_start(password);
 2191              		.loc 1 163 0
 2192 0388 E4319FE5 		ldr	r3, .L46+4
 2193 038c 070093E8 		ldmia	r3, {r0, r1, r2}
 2194 0390 FEFFFFEB 		bl	timer_start
 165:../keyboard.c **** 				 while(!timer_isStop())
 2195              		.loc 1 165 0
 2196 0394 0000A0E1 		mov	r0, r0	@ nop
 2197              	.L32:
 165:../keyboard.c **** 				 while(!timer_isStop())
 2198              		.loc 1 165 0 is_stmt 0 discriminator 1
 2199 0398 FEFFFFEB 		bl	timer_isStop
 2200 039c 0030A0E1 		mov	r3, r0
 2201 03a0 000053E3 		cmp	r3, #0
 2202 03a4 FBFFFF0A 		beq	.L32
 168:../keyboard.c **** 				gameCurrentMode = 1; //Cambiar de modo
 2203              		.loc 1 168 0 is_stmt 1
 2204 03a8 C0319FE5 		ldr	r3, .L46
 2205 03ac 0120A0E3 		mov	r2, #1
 2206 03b0 002083E5 		str	r2, [r3, #0]
 169:../keyboard.c **** 				D8Led_digit(15); //Mostar F
 2207              		.loc 1 169 0
 2208 03b4 0F00A0E3 		mov	r0, #15
 2209 03b8 FEFFFFEB 		bl	D8Led_digit
 2210              	.LBE2:
 2211              		.loc 1 232 0
 2212 03bc 5B0000EA 		b	.L43
 2213              	.L29:
 176:../keyboard.c **** 		if(key != 15)
 2214              		.loc 1 176 0
 2215 03c0 28301BE5 		ldr	r3, [fp, #-40]
 2216 03c4 0F0053E3 		cmp	r3, #15
 2217 03c8 0300000A 		beq	.L33
 178:../keyboard.c **** 			insertElementToQueue(&attempt, key);
 2218              		.loc 1 178 0
 2219 03cc A4019FE5 		ldr	r0, .L46+8
 2220 03d0 28101BE5 		ldr	r1, [fp, #-40]
 2221 03d4 FEFFFFEB 		bl	insertElementToQueue
 2222              		.loc 1 232 0
 2223 03d8 540000EA 		b	.L43
 2224              	.L33:
 183:../keyboard.c **** 			if(attempt.elements == 4)
 2225              		.loc 1 183 0
 2226 03dc 94319FE5 		ldr	r3, .L46+8
 2227 03e0 B830D3E1 		ldrh	r3, [r3, #8]
 2228 03e4 0338A0E1 		mov	r3, r3, asl #16
 2229 03e8 4338A0E1 		mov	r3, r3, asr #16
 2230 03ec 040053E3 		cmp	r3, #4
 2231 03f0 4D00001A 		bne	.L45
 2232              	.LBB3:
 185:../keyboard.c **** 			 timer_init(1);
 2233              		.loc 1 185 0
 2234 03f4 0100A0E3 		mov	r0, #1
 2235 03f8 FEFFFFEB 		bl	timer_init
 186:../keyboard.c **** 			 timer_start(attempt);
 2236              		.loc 1 186 0
 2237 03fc 74319FE5 		ldr	r3, .L46+8
 2238 0400 070093E8 		ldmia	r3, {r0, r1, r2}
 2239 0404 FEFFFFEB 		bl	timer_start
 188:../keyboard.c **** 			 while(!timer_isStop())
 2240              		.loc 1 188 0
 2241 0408 0000A0E1 		mov	r0, r0	@ nop
 2242              	.L34:
 188:../keyboard.c **** 			 while(!timer_isStop())
 2243              		.loc 1 188 0 is_stmt 0 discriminator 1
 2244 040c FEFFFFEB 		bl	timer_isStop
 2245 0410 0030A0E1 		mov	r3, r0
 2246 0414 000053E3 		cmp	r3, #0
 2247 0418 FBFFFF0A 		beq	.L34
 190:../keyboard.c **** 				 int equals = 1;
 2248              		.loc 1 190 0 is_stmt 1
 2249 041c 0130A0E3 		mov	r3, #1
 2250 0420 20300BE5 		str	r3, [fp, #-32]
 192:../keyboard.c **** 				 for(i = 0; i < 4; i++)
 2251              		.loc 1 192 0
 2252 0424 0030A0E3 		mov	r3, #0
 2253 0428 24300BE5 		str	r3, [fp, #-36]
 2254 042c 150000EA 		b	.L35
 2255              	.L38:
 194:../keyboard.c **** 					 if(password._queue[i] != attempt._queue[i])
 2256              		.loc 1 194 0
 2257 0430 3C219FE5 		ldr	r2, .L46+4
 2258 0434 24301BE5 		ldr	r3, [fp, #-36]
 2259 0438 8330A0E1 		mov	r3, r3, asl #1
 2260 043c 033082E0 		add	r3, r2, r3
 2261 0440 B020D3E1 		ldrh	r2, [r3, #0]
 2262 0444 2C119FE5 		ldr	r1, .L46+8
 2263 0448 24301BE5 		ldr	r3, [fp, #-36]
 2264 044c 8330A0E1 		mov	r3, r3, asl #1
 2265 0450 033081E0 		add	r3, r1, r3
 2266 0454 B030D3E1 		ldrh	r3, [r3, #0]
 2267 0458 0228A0E1 		mov	r2, r2, asl #16
 2268 045c 4228A0E1 		mov	r2, r2, asr #16
 2269 0460 0338A0E1 		mov	r3, r3, asl #16
 2270 0464 4338A0E1 		mov	r3, r3, asr #16
 2271 0468 030052E1 		cmp	r2, r3
 2272 046c 0200000A 		beq	.L36
 196:../keyboard.c **** 						 equals = 0;
 2273              		.loc 1 196 0
 2274 0470 0030A0E3 		mov	r3, #0
 2275 0474 20300BE5 		str	r3, [fp, #-32]
 197:../keyboard.c **** 						 break;
 2276              		.loc 1 197 0
 2277 0478 050000EA 		b	.L37
 2278              	.L36:
 192:../keyboard.c **** 				 for(i = 0; i < 4; i++)
 2279              		.loc 1 192 0
 2280 047c 24301BE5 		ldr	r3, [fp, #-36]
 2281 0480 013083E2 		add	r3, r3, #1
 2282 0484 24300BE5 		str	r3, [fp, #-36]
 2283              	.L35:
 192:../keyboard.c **** 				 for(i = 0; i < 4; i++)
 2284              		.loc 1 192 0 is_stmt 0 discriminator 1
 2285 0488 24301BE5 		ldr	r3, [fp, #-36]
 2286 048c 030053E3 		cmp	r3, #3
 2287 0490 E6FFFFDA 		ble	.L38
 2288              	.L37:
 203:../keyboard.c **** 				 emptyQ.elements = -1;
 2289              		.loc 1 203 0 is_stmt 1
 2290 0494 0030E0E3 		mvn	r3, #0
 2291 0498 BC324BE1 		strh	r3, [fp, #-44]	@ movhi
 204:../keyboard.c **** 				 if(equals == 1)
 2292              		.loc 1 204 0
 2293 049c 20301BE5 		ldr	r3, [fp, #-32]
 2294 04a0 010053E3 		cmp	r3, #1
 2295 04a4 0C00001A 		bne	.L39
 2296              	.LBB4:
 206:../keyboard.c **** 					 D8Led_digit(10); //A
 2297              		.loc 1 206 0
 2298 04a8 0A00A0E3 		mov	r0, #10
 2299 04ac FEFFFFEB 		bl	D8Led_digit
 207:../keyboard.c **** 					 timer_init(2);
 2300              		.loc 1 207 0
 2301 04b0 0200A0E3 		mov	r0, #2
 2302 04b4 FEFFFFEB 		bl	timer_init
 208:../keyboard.c **** 					 timer_start(emptyQ);
 2303              		.loc 1 208 0
 2304 04b8 34304BE2 		sub	r3, fp, #52
 2305 04bc 070093E8 		ldmia	r3, {r0, r1, r2}
 2306 04c0 FEFFFFEB 		bl	timer_start
 209:../keyboard.c **** 					 while(!timer_isStop())
 2307              		.loc 1 209 0
 2308 04c4 0000A0E1 		mov	r0, r0	@ nop
 2309              	.L40:
 209:../keyboard.c **** 					 while(!timer_isStop())
 2310              		.loc 1 209 0 is_stmt 0 discriminator 1
 2311 04c8 FEFFFFEB 		bl	timer_isStop
 2312 04cc 0030A0E1 		mov	r3, r0
 2313 04d0 000053E3 		cmp	r3, #0
 2314 04d4 FBFFFF0A 		beq	.L40
 209:../keyboard.c **** 					 while(!timer_isStop())
 2315              		.loc 1 209 0
 2316 04d8 0B0000EA 		b	.L41
 2317              	.L39:
 2318              	.LBE4:
 2319              	.LBB5:
 214:../keyboard.c **** 					 D8Led_digit(14); //E
 2320              		.loc 1 214 0 is_stmt 1
 2321 04dc 0E00A0E3 		mov	r0, #14
 2322 04e0 FEFFFFEB 		bl	D8Led_digit
 215:../keyboard.c **** 					 timer_init(2);
 2323              		.loc 1 215 0
 2324 04e4 0200A0E3 		mov	r0, #2
 2325 04e8 FEFFFFEB 		bl	timer_init
 216:../keyboard.c **** 					 timer_start(emptyQ);
 2326              		.loc 1 216 0
 2327 04ec 34304BE2 		sub	r3, fp, #52
 2328 04f0 070093E8 		ldmia	r3, {r0, r1, r2}
 2329 04f4 FEFFFFEB 		bl	timer_start
 217:../keyboard.c **** 					 while(!timer_isStop())
 2330              		.loc 1 217 0
 2331 04f8 0000A0E1 		mov	r0, r0	@ nop
 2332              	.L42:
 217:../keyboard.c **** 					 while(!timer_isStop())
 2333              		.loc 1 217 0 is_stmt 0 discriminator 1
 2334 04fc FEFFFFEB 		bl	timer_isStop
 2335 0500 0030A0E1 		mov	r3, r0
 2336 0504 000053E3 		cmp	r3, #0
 2337 0508 FBFFFF0A 		beq	.L42
 2338              	.L41:
 2339              	.LBE5:
 223:../keyboard.c **** 				 gameCurrentMode = 0; //Cambiar de modo
 2340              		.loc 1 223 0 is_stmt 1
 2341 050c 5C309FE5 		ldr	r3, .L46
 2342 0510 0020A0E3 		mov	r2, #0
 2343 0514 002083E5 		str	r2, [r3, #0]
 224:../keyboard.c **** 				 D8Led_digit(15); //Mostar C
 2344              		.loc 1 224 0
 2345 0518 0F00A0E3 		mov	r0, #15
 2346 051c FEFFFFEB 		bl	D8Led_digit
 2347              	.LBE3:
 2348              		.loc 1 232 0
 2349 0520 020000EA 		b	.L43
 2350              	.L44:
 2351 0524 0000A0E1 		mov	r0, r0	@ nop
 2352 0528 000000EA 		b	.L43
 2353              	.L45:
 2354 052c 0000A0E1 		mov	r0, r0	@ nop
 2355              	.L43:
 2356              		.loc 1 232 0 is_stmt 0 discriminator 1
 2357 0530 44309FE5 		ldr	r3, .L46+12
 2358 0534 003093E5 		ldr	r3, [r3, #0]
 2359 0538 023003E2 		and	r3, r3, #2
 2360 053c 000053E3 		cmp	r3, #0
 2361 0540 FAFFFF0A 		beq	.L43
 233:../keyboard.c **** 
 234:../keyboard.c ****     /* Eliminar rebotes de depreson */
 235:../keyboard.c ****     Delay(200);
 2362              		.loc 1 235 0 is_stmt 1
 2363 0544 C800A0E3 		mov	r0, #200
 2364 0548 FEFFFFEB 		bl	Delay
 236:../keyboard.c **** 
 237:../keyboard.c ****     /* Borrar interrupciones pendientes */
 238:../keyboard.c ****     rI_ISPC |= BIT_EINT1;
 2365              		.loc 1 238 0
 2366 054c 2C309FE5 		ldr	r3, .L46+16
 2367 0550 28209FE5 		ldr	r2, .L46+16
 2368 0554 002092E5 		ldr	r2, [r2, #0]
 2369 0558 012482E3 		orr	r2, r2, #16777216
 2370 055c 002083E5 		str	r2, [r3, #0]
 239:../keyboard.c **** }
 2371              		.loc 1 239 0
 2372 0560 1CD04BE2 		sub	sp, fp, #28
 2373 0564 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 2374 0568 04C09DE4 		ldmfd	sp!, {ip}
 2375 056c 04F05EE2 		subs	pc, lr, #4
 2376              	.L47:
 2377              		.align	2
 2378              	.L46:
 2379 0570 18000000 		.word	gameCurrentMode
 2380 0574 00000000 		.word	password
 2381 0578 0C000000 		.word	attempt
 2382 057c 4400D201 		.word	30539844
 2383 0580 2400E001 		.word	31457316
 2384              		.cfi_endproc
 2385              	.LFE2:
 2387              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 keyboard.c
C:\Users\Jorge\AppData\Local\Temp\ccDeUMoc.s:1798   .bss:00000000 $d
C:\Users\Jorge\AppData\Local\Temp\ccDeUMoc.s:1799   .bss:00000000 password
C:\Users\Jorge\AppData\Local\Temp\ccDeUMoc.s:1802   .bss:0000000c attempt
C:\Users\Jorge\AppData\Local\Temp\ccDeUMoc.s:1805   .bss:00000018 gameCurrentMode
C:\Users\Jorge\AppData\Local\Temp\ccDeUMoc.s:1808   .text:00000000 $a
C:\Users\Jorge\AppData\Local\Temp\ccDeUMoc.s:1811   .text:00000000 keyboard_init
C:\Users\Jorge\AppData\Local\Temp\ccDeUMoc.s:1878   .text:0000009c $d
C:\Users\Jorge\AppData\Local\Temp\ccDeUMoc.s:2135   .text:00000318 keyboard_ISR
C:\Users\Jorge\AppData\Local\Temp\ccDeUMoc.s:1891   .text:000000c4 $a
C:\Users\Jorge\AppData\Local\Temp\ccDeUMoc.s:1893   .text:000000c4 key_read
C:\Users\Jorge\AppData\Local\Temp\ccDeUMoc.s:2126   .text:00000308 $d
C:\Users\Jorge\AppData\Local\Temp\ccDeUMoc.s:2133   .text:00000318 $a
C:\Users\Jorge\AppData\Local\Temp\ccDeUMoc.s:2379   .text:00000570 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
D8Led_digit
Delay
insertElementToQueue
timer_init
timer_start
timer_isStop
